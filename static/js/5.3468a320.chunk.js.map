{"version":3,"sources":["components/AmountControl/AmountControl.js","components/AmountControl/index.js","components/ThumbnailBox/ThumbnailBox.js","components/ThumbnailBox/index.js","components/SummaryList/SummaryList.js","components/SummaryList/index.js","containers/Cart/Cart.js","containers/Cart/index.js","components/Breadcrumbs/Breadcrumbs.js","components/Breadcrumbs/index.js"],"names":["AmountControl","amount","small","onAddToCart","onRemoveFromCart","list","className","onClick","defaultName","defaultProps","ThumbnailBox","thumb","name","category","productId","src","alt","to","route","product","link","target","SummaryList","rwd","cartItems","onRemoveAllItemsFromCart","orders","map","order","key","id","quantity","currencyFormat","totalItemPrice","colSpan","totalPrice","NoData","message","price","Cart","this","props","addItemToCart","removeItemFromCart","removeAllItemsFromCart","Breadcrumbs","crumbs","Button","back","linkTo","catalog","main","checkout","React","Component","displayName","connect","store","cartItemsSelector","dispatch","home","item","index","length"],"mappings":"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","file":"static/js/5.3468a320.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styles.sass';\n\nconst AmountControl = ({ amount, small, onAddToCart, onRemoveFromCart, list }) => (\n    <div\n        className={`amount-control ${small ? 'amount-control--small' : ''} ${\n            list ? 'amount-control--list' : ''\n        }`}\n    >\n        {amount ? (\n            <>\n                <button onClick={onRemoveFromCart} className=\"amount-control__minus\">\n                    -\n                </button>\n                <span className=\"amount-control__number\">{amount}</span>\n                <button onClick={onAddToCart} className=\"amount-control__plus\">\n                    +\n                </button>\n            </>\n        ) : (\n            <button onClick={onAddToCart} className=\"amount-control__add\">\n                Add to cart\n            </button>\n        )}\n    </div>\n);\n\nAmountControl.defaultName = 'AmountControl';\nAmountControl.propTypes = {\n    onAddToCart: PropTypes.func.isRequired,\n    onRemoveFromCart: PropTypes.func.isRequired,\n    amount: PropTypes.number,\n    small: PropTypes.bool,\n    list: PropTypes.bool\n};\nAmountControl.defaultProps = {\n    amount: 0,\n    small: false,\n    list: false\n};\n\nexport default AmountControl;\n","import AmountControl from './AmountControl';\n\nexport default AmountControl;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { route } from '../../utils/config';\nimport './styles.sass';\n\nconst ThumbnailBox = ({ thumb, name, category, productId, small, amount }) => (\n    <div className={`thumbnail-box ${small ? 'thumbnail-box--small' : ''}`}>\n        <div className=\"thumbnail-box__image\">\n            {amount !== 0 && <span className=\"thumbnail-box__item-amount\">{amount}</span>}\n            <img src={thumb} alt={name} />\n        </div>\n        <div className=\"thumbnail-box__content\">\n            <Link\n                className=\"thumbnail-box__title\"\n                to={route.product.link(productId)}\n                target=\"_blank\"\n            >\n                {name}\n            </Link>\n            <p className=\"thumbnail-box__category\">{category}</p>\n        </div>\n    </div>\n);\n\nThumbnailBox.defaultName = 'ThumbnailBox';\nThumbnailBox.propTypes = {\n    thumb: PropTypes.string,\n    name: PropTypes.string,\n    category: PropTypes.string,\n    productId: PropTypes.number,\n    small: PropTypes.bool,\n    amount: PropTypes.number\n};\nThumbnailBox.defaultProps = {\n    thumb: '',\n    name: 'Thumbnail',\n    category: 'No category',\n    productId: 0,\n    small: false,\n    amount: 0\n};\n\nexport default ThumbnailBox;\n","import ThumbnailBox from './ThumbnailBox';\n\nexport default ThumbnailBox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ThumbnailBox from '../ThumbnailBox';\nimport AmountControl from '../AmountControl';\nimport NoData from '../NoData';\nimport { currencyFormat } from '../../utils/helper';\nimport './styles.sass';\n\nconst SummaryList = ({\n    rwd,\n    cartItems,\n    small,\n    onAddToCart,\n    onRemoveFromCart,\n    onRemoveAllItemsFromCart\n}) => (\n    <div className={`summary-list ${rwd ? 'summary-list--rwd' : ''}`}>\n        {small &&\n            (cartItems.amount ? (\n                <table className=\"summary-list__table\">\n                    <tbody>\n                        {cartItems.orders.map(order => (\n                            <tr key={order.id}>\n                                <td>\n                                    <ThumbnailBox\n                                        small\n                                        amount={order.quantity}\n                                        productId={order.id}\n                                        name={order.name}\n                                        thumb={order.thumb}\n                                        category={order.category}\n                                    />\n                                </td>\n                                <td>{currencyFormat(order.totalItemPrice)}</td>\n                            </tr>\n                        ))}\n                        <tr className=\"summary-list__summary summary-list__summary--small\">\n                            <td colSpan=\"2\">\n                                Summary:{' '}\n                                <span className=\"summary-list__summary-price\">\n                                    {currencyFormat(cartItems.totalPrice)}\n                                </span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            ) : (\n                <NoData message=\"Add some items to your cart!\" />\n            ))}\n\n        {!small &&\n            (cartItems.amount ? (\n                <table className=\"summary-list__table\">\n                    <tbody>\n                        {cartItems.orders.map(order => (\n                            <tr key={order.id}>\n                                <td>\n                                    <ThumbnailBox\n                                        productId={order.id}\n                                        name={order.name}\n                                        thumb={order.thumb}\n                                        category={order.category}\n                                    />\n                                </td>\n                                <td>\n                                    <AmountControl\n                                        small\n                                        amount={order.quantity}\n                                        onAddToCart={() =>\n                                            onAddToCart({\n                                                id: order.id,\n                                                name: order.name,\n                                                thumb: order.thumb,\n                                                price: order.price,\n                                                category: order.category.name\n                                            })\n                                        }\n                                        onRemoveFromCart={() => onRemoveFromCart(order.id)}\n                                    />\n                                </td>\n                                <td>{currencyFormat(order.totalItemPrice)}</td>\n                                <td className=\"text-center\">\n                                    <button\n                                        onClick={() => onRemoveAllItemsFromCart(order.id)}\n                                        className=\"close-button close-button--small\"\n                                    />\n                                </td>\n                            </tr>\n                        ))}\n                        <tr className=\"summary-list__summary\">\n                            <td colSpan=\"4\">\n                                Summary:{' '}\n                                <span className=\"summary-list__summary-price\">\n                                    {currencyFormat(cartItems.totalPrice)}\n                                </span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            ) : (\n                <NoData message=\"Your cart is empty\" />\n            ))}\n    </div>\n);\n\nSummaryList.defaultName = 'SummaryList';\nSummaryList.propTypes = {\n    onAddToCart: PropTypes.func,\n    onRemoveFromCart: PropTypes.func,\n    onRemoveAllItemsFromCart: PropTypes.func,\n    cartItems: PropTypes.shape({\n        amount: PropTypes.number,\n        orders: PropTypes.array,\n        totalPrice: PropTypes.number\n    }),\n    small: PropTypes.bool,\n    rwd: PropTypes.bool\n};\nSummaryList.defaultProps = {\n    onAddToCart: null,\n    onRemoveFromCart: null,\n    onRemoveAllItemsFromCart: null,\n    cartItems: {\n        amount: 0,\n        orders: [],\n        totalPrice: 0\n    },\n    rwd: false,\n    small: false\n};\n\nexport default SummaryList;\n","import SummaryList from './SummaryList';\n\nexport default SummaryList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { route } from '../../utils/config';\nimport { connect } from 'react-redux';\nimport { cartItemsSelector } from '../../redux/cart/selectors';\nimport {\n    addItemToCart,\n    removeItemFromCart,\n    removeAllItemsFromCart\n} from '../../redux/cart/actions';\nimport SummaryList from '../../components/SummaryList';\nimport Breadcrumbs from '../../components/Breadcrumbs';\nimport Button from '../../components/Button';\n\nclass Cart extends React.Component {\n    render() {\n        const { cartItems, addItemToCart, removeItemFromCart, removeAllItemsFromCart } = this.props;\n\n        return (\n            <>\n                <Breadcrumbs crumbs={[['Shopping cart']]} />\n                <h1 className=\"main-subtitle\">Shopping cart</h1>\n                <SummaryList\n                    rwd\n                    cartItems={cartItems}\n                    onAddToCart={addItemToCart}\n                    onRemoveFromCart={removeItemFromCart}\n                    onRemoveAllItemsFromCart={removeAllItemsFromCart}\n                />\n\n                <div className=\"space-between\">\n                    <Button back linkTo={route.catalog.link}>\n                        Continue shopping\n                    </Button>\n                    {cartItems.amount !== 0 && (\n                        <Button main linkTo={route.checkout.link}>\n                            Checkout\n                        </Button>\n                    )}\n                </div>\n            </>\n        );\n    }\n}\n\nCart.displayName = 'Cart';\nCart.propTypes = {\n    addItemToCart: PropTypes.func.isRequired,\n    removeItemFromCart: PropTypes.func.isRequired,\n    removeAllItemsFromCart: PropTypes.func.isRequired,\n    cartItems: PropTypes.shape({\n        amount: PropTypes.number,\n        orders: PropTypes.array,\n        totalPrice: PropTypes.number\n    })\n};\nCart.defaultProps = {\n    amount: 0,\n    orders: [],\n    totalPrice: 0\n};\n\nconst mapDispatchToProps = dispatch => ({\n    addItemToCart: product => dispatch(addItemToCart(product)),\n    removeItemFromCart: id => dispatch(removeItemFromCart(id)),\n    removeAllItemsFromCart: id => dispatch(removeAllItemsFromCart(id))\n});\n\nconst mapStateToProps = store => ({\n    cartItems: cartItemsSelector(store)\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Cart);\n","import Cart from './Cart';\n\nexport default Cart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { route } from '../../utils/config';\nimport './styles.sass';\n\nconst Breadcrumbs = ({ crumbs }) => (\n    <ul className=\"breadcrumbs\">\n        <li className=\"breadcrumbs__item breadcrumbs__item--home\">\n            <Link className=\"breadcrumbs__item-link\" to={route.home.link}>\n                Home\n            </Link>\n        </li>\n        {crumbs.map((item, index) =>\n            crumbs.length - 1 === index ? (\n                <li className=\"breadcrumbs__item\" key={item[0]}>\n                    {item[0]}\n                </li>\n            ) : (\n                <li className=\"breadcrumbs__item\" key={item[0]}>\n                    <Link className=\"breadcrumbs__item-link\" to={item[1]}>\n                        {item[0]}\n                    </Link>\n                </li>\n            )\n        )}\n    </ul>\n);\n\nBreadcrumbs.defaultName = 'Breadcrumbs';\nBreadcrumbs.propTypes = {\n    crumbs: PropTypes.array.isRequired\n};\n\nexport default Breadcrumbs;\n","import Breadcrumbs from './Breadcrumbs';\n\nexport default Breadcrumbs;\n"],"sourceRoot":""}